openapi: 3.0.0
info:
  title: Petshop API
  description: |-
    Trata-se de uma API de Gerenciamento de Petshop.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Servidor Local
  - url: http://staging-api.example.com
    description: Servidor Cloud
tags:
  - name: users
    description: Operações sobre Usuários
paths:
  /users:
    get:
      summary: Lista todos os usuários cadastrados.
      description: Retorna uma lista de todos os usuários cadastrados no sistema. Requer permissão ADMIN ou SUPER_ADMIN.
      tags:
        - users
      operationId: getAllUsers
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Lista de usuários retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/register:
    post:
      summary: Cria um novo usuário.
      description: |-
        Cria um novo usuário no sistema. 
        As senhas devem coincidir e seguir as regras de complexidade. 
        O e-mail e o CPF devem ser únicos.
      tags:
        - users
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequest"
      responses:
        "201":
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{id}:
    put:
      summary: Atualiza um usuário existente.
      description: |-
        Atualiza as informações de um usuário existente no sistema. 
        O e-mail e o CPF não podem ser alterados para valores já existentes no sistema.
      tags:
        - users
      operationId: updateUser
      security:
        - bearerAuth: [ ]
        - csrfToken: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser atualizado
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Usuário atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Exclui a conta do usuário autenticado.
      description: |-
        Exclui a conta do usuário autenticado definitivamente do sistema. 
        Usuários inativos por mais de 30 dias serão excluídos automaticamente.
      tags:
        - users
      operationId: deleteUser
      security:
        - bearerAuth: [ ]
        - csrfToken: [ ]
      responses:
        "204":
          description: Conta do usuário excluída com sucesso.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/unlock:
    post:
      summary: Desbloqueia a conta de um usuário.
      description: Desbloqueia a conta de um usuário com base no e-mail fornecido.
      tags:
        - users
      operationId: unlockAccount
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        "200":
          description: Conta desbloqueada com sucesso.
          content:
            application/json:
              schema:
                type: string
                example: Conta desbloqueada com sucesso
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - name
        - email
        - cpf
        - password
        - confirmPassword
        - phone
        - role
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 150
          example: 'João da Silva'
          description: 'Nome do Usuário'
        email:
          type: string
          format: email
          maxLength: 150
          example: 'Email do Usuário'
        cpf:
          type: string
          format: cpf
          default: 11
          pattern: "^\\d{11}$"
          example: '12345678900'
          description: 'CPF do Usuário'
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$'
          example: 'Senha do Usuário'
          description: |-
            Senha do Usuário deve conter no mínimo 8 caracteres, sendo pelo menos uma letra minúscula, 
            uma letra maiúscula, um número e um caracter especial.
        confirmPassword:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$'
          example: 'Senha do Usuário'
          description: 'A confirmação da senha deve ser igual a senha.'
        phone:
          type: string
          format: phone
          pattern: "^\\+?\\d{9,14}$"
          minLength: 9
          maxLength: 15
          example: '(11) 99999-9999'
          description: 'Telefone do Usuário'
        role:
          type: string
          $ref: "#/components/schemas/RoleType"
          example: SUPER_ADMIN
          description: 'Papel do Usuário'
        birthDate:
          type: string
          format: date
          example: '1990-01-01'
          description: 'Data de Nascimento do Usuário'
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 150
          example: 'João da Silva'
          description: 'Nome do Usuário'
        email:
          type: string
          format: email
          maxLength: 150
          example: 'Email do Usuário'
        cpf:
          type: string
          format: cpf
          default: 11
          pattern: "^\\d{11}$"
          example: '12345678900'
          description: 'CPF do Usuário'
        phone:
          type: string
          format: phone
          pattern: "^\\+?\\d{9,14}$"
          minLength: 9
          maxLength: 15
          example: '(11) 99999-9999'
          description: 'Telefone do Usuário'
        birthDate:
          type: string
          format: date
          example: '1990-01-01'
          description: 'Data de Nascimento do Usuário'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'ID do Usuário'
        name:
          type: string
          example: 'João da Silva'
          description: 'Nome do Usuário'
        email:
          type: string
          example: ''
          description: 'E-mail do Usuário'
        cpf:
          type: string
          example: '123.456.789-00'
          description: 'CPF do Usuário'
        phone:
          type: string
          example: '(11) 99999-9999'
          description: 'Telefone do Usuário'
        enabled:
          type: boolean
          example: true
          description: 'Usuário Habilitado'
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
          description: 'Papéis do Usuário'
        birthDate:
          type: string
          format: date
          example: '1990-01-01'
          description: 'Data de Nascimento do Usuário'
    RoleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'ID do Papel'
        name:
          type: string
          example: 'ADMIN'
          description: 'Nome do Papel'
        description:
          type: string
          example: 'Administrador'
          description: 'Descrição do Papel'
    RoleType:
      type: string
      enum:
        - SUPER_ADMIN
        - ADMIN
        - USER
        - OWNER
        - CUSTOMER
        - EMPLOYEE
        - VETERINARIAN
      example: SUPER_ADMIN
      description: Tipo de Papel
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso.
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    csrfToken:
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID